/*
          # [MVP] Schema Inicial - v2 (Correção de Enum)
          Cria a estrutura de tabelas, tipos, funções e políticas de segurança
          essenciais para o funcionamento do frontend do sistema Revo ERP.
          Esta versão corrige um valor padrão incorreto para o enum 'situacao_produto'.

          ## Query Description: [Este script é idempotente e seguro para reexecução.
          Ele verificará a existência de cada objeto (tabela, tipo, função) antes de
          criá-lo. Se você executou a versão anterior e ela falhou, pode executar
          esta versão sem a necessidade de limpar o banco de dados. Ela completará
          a configuração ou corrigirá os valores padrão.]

          ## Metadata:
          - Schema-Category: ["Structural"]
          - Impact-Level: ["Low"]
          - Requires-Backup: [false]
          - Reversible: [false]

          ## Structure Details:
          - Criação de tipos ENUM para status, tipos de pessoa, etc.
          - Criação das tabelas principais: clientes, vendedores, produtos, servicos, pedidos_venda, ordens_servico, etc.
          - Definição de chaves primárias, estrangeiras e valores padrão.
          - Criação de views para relatórios e visões consolidadas.
          - Criação de funções e triggers para automações (ex: criar perfil de vendedor).
          - Habilitação de RLS em todas as tabelas com políticas padrão.

          ## Security Implications:
          - RLS Status: [Enabled]
          - Policy Changes: [Yes]
          - Auth Requirements: [Usuários autenticados terão acesso de acordo com as políticas.]

          ## Performance Impact:
          - Indexes: [Added]
          - Triggers: [Added]
          - Estimated Impact: [Baixo impacto inicial. A performance dependerá do volume de dados.]
          */

-- Habilitar a extensão pgcrypto se ainda não estiver habilitada
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Tipos ENUM
DO $$ BEGIN
    CREATE TYPE tipo_pessoa AS ENUM ('FISICA', 'JURIDICA', 'ESTRANGEIRO');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE contribuinte_icms AS ENUM ('Não informado', 'Contribuinte ICMS', 'Contribuinte Isento (sem IE)', 'Não Contribuinte');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE situacao_produto AS ENUM ('ATIVO', 'INATIVO');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE situacao_servico AS ENUM ('ATIVO', 'INATIVO');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE origem_produto AS ENUM ('0 - Nacional', '1 - Estrangeira (Imp. Direta)', '2 - Estrangeira (Merc. Interno)', '3 - Nacional (Imp. > 40%)', '4 - Nacional (Proc. Básico)', '5 - Nacional (Imp. &lt;= 40%)', '6 - Estrangeira (Imp. Direta, s/ similar)', '7 - Estrangeira (Merc. Interno, s/ similar)', '8 - Nacional (Imp. > 70%)');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE tipo_pessoa_vendedor AS ENUM ('Física', 'Jurídica', 'Estrangeiro', 'Estrangeiro no Brasil');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE situacao_vendedor AS ENUM ('Ativo com acesso ao sistema', 'Ativo sem acesso ao sistema', 'Inativo');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE status_os AS ENUM ('ABERTA', 'EM_ANDAMENTO', 'FINALIZADA', 'CANCELADA', 'ORCAMENTO');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE prioridade_os AS ENUM ('BAIXA', 'MEDIA', 'ALTA', 'URGENTE');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE status_pedido_venda AS ENUM ('ABERTO', 'FATURADO', 'CANCELADO');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE status_fatura AS ENUM ('EMITIDA', 'PAGA', 'VENCIDA', 'CANCELADA');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE status_conta_receber AS ENUM ('A_RECEBER', 'RECEBIDO', 'VENCIDO');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE status_conta_pagar AS ENUM ('A_PAGAR', 'PAGO', 'VENCIDO');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE ocorrencia_conta AS ENUM ('Única', 'Recorrente');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE tipo_movimento_caixa AS ENUM ('ENTRADA', 'SAIDA');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE contrato_situacao AS ENUM ('Ativo', 'Demonstração', 'Inativo', 'Isento', 'Baixado', 'Encerrado');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE status_nota_entrada AS ENUM ('EM_DIGITACAO', 'FINALIZADA', 'CANCELADA');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE status_ordem_compra AS ENUM ('ABERTA', 'RECEBIDA', 'CANCELADA');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Tabela de Configurações
CREATE TABLE IF NOT EXISTS configuracoes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    chave TEXT NOT NULL UNIQUE,
    valor JSONB,
    descricao TEXT,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela de Vendedores (usada como perfis de usuário)
CREATE TABLE IF NOT EXISTS vendedores (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID UNIQUE REFERENCES auth.users(id) ON DELETE SET NULL,
    nome TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    cpf_cnpj TEXT,
    tipo_pessoa tipo_pessoa_vendedor DEFAULT 'Física',
    contribuinte contribuinte_icms DEFAULT 'Não informado',
    situacao situacao_vendedor DEFAULT 'Ativo com acesso ao sistema',
    ativo BOOLEAN DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela de Clientes e Fornecedores
CREATE TABLE IF NOT EXISTS clientes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    nome TEXT NOT NULL,
    nome_fantasia TEXT,
    email TEXT,
    cpf_cnpj TEXT,
    tipo_pessoa tipo_pessoa DEFAULT 'FISICA',
    contribuinte_icms contribuinte_icms DEFAULT 'Não informado',
    is_cliente BOOLEAN DEFAULT true,
    is_fornecedor BOOLEAN DEFAULT false,
    is_transportadora BOOLEAN DEFAULT false,
    logradouro TEXT,
    numero TEXT,
    bairro TEXT,
    cidade TEXT,
    estado TEXT,
    cep TEXT,
    celular TEXT,
    telefone TEXT,
    vendedor_id UUID REFERENCES vendedores(id),
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela de Produtos
CREATE TABLE IF NOT EXISTS produtos (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    nome TEXT NOT NULL,
    codigo TEXT UNIQUE,
    codigo_barras TEXT,
    preco_venda NUMERIC(10, 2) NOT NULL DEFAULT 0,
    custo NUMERIC(10, 2),
    unidade TEXT,
    ncm TEXT,
    origem origem_produto DEFAULT '0 - Nacional',
    situacao situacao_produto DEFAULT 'ATIVO',
    controlar_estoque BOOLEAN DEFAULT false,
    estoque_minimo INT,
    estoque_maximo INT,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela de Serviços
CREATE TABLE IF NOT EXISTS servicos (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    descricao TEXT NOT NULL,
    codigo TEXT UNIQUE,
    preco NUMERIC(10, 2) NOT NULL DEFAULT 0,
    unidade TEXT,
    situacao situacao_servico DEFAULT 'ATIVO',
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela de Pedidos de Venda
CREATE TABLE IF NOT EXISTS pedidos_venda (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    numero TEXT NOT NULL UNIQUE,
    cliente_id UUID REFERENCES clientes(id),
    vendedor_id UUID REFERENCES vendedores(id),
    data_venda DATE NOT NULL DEFAULT now(),
    valor_total NUMERIC(10, 2) NOT NULL DEFAULT 0,
    status status_pedido_venda DEFAULT 'ABERTO',
    expedido BOOLEAN DEFAULT false,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela de Itens do Pedido de Venda
CREATE TABLE IF NOT EXISTS pedido_venda_itens (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    pedido_id UUID NOT NULL REFERENCES pedidos_venda(id) ON DELETE CASCADE,
    produto_id UUID REFERENCES produtos(id),
    servico_id UUID REFERENCES servicos(id),
    descricao TEXT NOT NULL,
    quantidade NUMERIC(10, 3) NOT NULL,
    valor_unitario NUMERIC(10, 2) NOT NULL,
    valor_total NUMERIC(10, 2) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now(),
    CONSTRAINT chk_produto_ou_servico CHECK (produto_id IS NOT NULL OR servico_id IS NOT NULL)
);

-- Tabela de Faturas de Venda
CREATE TABLE IF NOT EXISTS faturas_venda (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    pedido_id UUID NOT NULL REFERENCES pedidos_venda(id),
    numero_fatura TEXT NOT NULL UNIQUE,
    data_emissao DATE NOT NULL DEFAULT now(),
    data_vencimento DATE NOT NULL,
    valor_total NUMERIC(10, 2) NOT NULL,
    status status_fatura DEFAULT 'EMITIDA',
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela de Contas a Receber
CREATE TABLE IF NOT EXISTS contas_receber (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    cliente_id UUID REFERENCES clientes(id),
    fatura_id UUID REFERENCES faturas_venda(id),
    contrato_id UUID, -- Será referenciada após a criação da tabela de contratos
    descricao TEXT,
    valor NUMERIC(10, 2) NOT NULL,
    data_vencimento DATE NOT NULL,
    data_pagamento DATE,
    status status_conta_receber DEFAULT 'A_RECEBER',
    ocorrencia ocorrencia_conta DEFAULT 'Única',
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela de Contas a Pagar
CREATE TABLE IF NOT EXISTS contas_pagar (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    fornecedor_id UUID REFERENCES clientes(id),
    descricao TEXT,
    valor NUMERIC(10, 2) NOT NULL,
    data_vencimento DATE NOT NULL,
    data_pagamento DATE,
    status status_conta_pagar DEFAULT 'A_PAGAR',
    ocorrencia ocorrencia_conta DEFAULT 'Única',
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela de Fluxo de Caixa
CREATE TABLE IF NOT EXISTS fluxo_caixa (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    data DATE NOT NULL DEFAULT now(),
    descricao TEXT NOT NULL,
    valor NUMERIC(10, 2) NOT NULL,
    tipo tipo_movimento_caixa NOT NULL,
    conta_receber_id UUID REFERENCES contas_receber(id),
    conta_pagar_id UUID REFERENCES contas_pagar(id),
    created_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela de Ordens de Serviço
CREATE TABLE IF NOT EXISTS ordens_servico (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    numero TEXT NOT NULL UNIQUE,
    cliente_id UUID REFERENCES clientes(id),
    vendedor_id UUID REFERENCES vendedores(id),
    tecnico_id UUID REFERENCES vendedores(id),
    data_inicio DATE NOT NULL DEFAULT now(),
    data_previsao DATE,
    descricao_servico TEXT,
    status status_os DEFAULT 'ABERTA',
    prioridade prioridade_os DEFAULT 'MEDIA',
    valor_total NUMERIC(10, 2) DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela de Itens da Ordem de Serviço
CREATE TABLE IF NOT EXISTS ordem_servico_itens (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    ordem_servico_id UUID NOT NULL REFERENCES ordens_servico(id) ON DELETE CASCADE,
    servico_id UUID REFERENCES servicos(id),
    descricao TEXT NOT NULL,
    quantidade NUMERIC(10, 3) NOT NULL,
    preco NUMERIC(10, 2) NOT NULL,
    valor_total NUMERIC(10, 2) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela de Contratos
CREATE TABLE IF NOT EXISTS contratos (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    cliente_id UUID NOT NULL REFERENCES clientes(id),
    descricao TEXT NOT NULL,
    valor NUMERIC(10, 2) NOT NULL,
    dia_vencimento INT NOT NULL,
    situacao contrato_situacao DEFAULT 'Ativo',
    data_contrato DATE NOT NULL DEFAULT now(),
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Adicionar a referência de contrato_id em contas_receber
ALTER TABLE contas_receber ADD CONSTRAINT fk_contas_receber_contrato FOREIGN KEY (contrato_id) REFERENCES contratos(id) ON DELETE SET NULL;

-- Tabela de Oportunidades do CRM
CREATE TABLE IF NOT EXISTS crm_oportunidades (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    titulo TEXT NOT NULL,
    cliente_id UUID REFERENCES clientes(id),
    vendedor_id UUID REFERENCES vendedores(id),
    valor_estimado NUMERIC(10, 2),
    etapa TEXT DEFAULT 'Lead',
    data_fechamento_prevista DATE,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela de Estoque (Movimentações)
CREATE TABLE IF NOT EXISTS estoque_movimentos (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    produto_id UUID NOT NULL REFERENCES produtos(id),
    tipo tipo_movimento_caixa NOT NULL,
    quantidade INT NOT NULL,
    data TIMESTAMPTZ DEFAULT now(),
    origem TEXT,
    observacao TEXT
);

-- View para Produtos com Estoque
CREATE OR REPLACE VIEW produtos_com_estoque AS
SELECT
    p.id,
    p.nome,
    p.codigo,
    p.controlar_estoque,
    p.estoque_minimo,
    p.estoque_maximo,
    p.unidade,
    p.situacao,
    (SELECT COALESCE(SUM(CASE WHEN m.tipo = 'ENTRADA' THEN m.quantidade ELSE -m.quantidade END), 0) FROM estoque_movimentos m WHERE m.produto_id = p.id) AS estoque_atual,
    (
        SELECT json_agg(pi.*)
        FROM (
            SELECT * FROM produto_imagens WHERE produto_id = p.id ORDER BY created_at LIMIT 1
        ) pi
    ) as imagens
FROM
    produtos p;

-- View para Comissões
CREATE OR REPLACE VIEW comissoes_view AS
SELECT
    gen_random_uuid() as id,
    v.id as vendedor_id,
    v.nome as vendedor_nome,
    c.id as cliente_id,
    c.nome as cliente_nome,
    pv.data_venda,
    pv.valor_total as valor_venda,
    pv.valor_total * 0.05 as valor_comissao, -- Exemplo: 5% de comissão
    CASE
        WHEN cr.status = 'RECEBIDO' THEN 'Paga'
        WHEN pv.status = 'FATURADO' THEN 'Liberada'
        ELSE 'Pendente'
    END as status,
    cr.data_pagamento as data_pagamento
FROM
    pedidos_venda pv
JOIN
    vendedores v ON pv.vendedor_id = v.id
JOIN
    clientes c ON pv.cliente_id = c.id
LEFT JOIN
    faturas_venda fv ON pv.id = fv.pedido_id
LEFT JOIN
    contas_receber cr ON fv.id = cr.fatura_id;

-- View para DRE Mensal
CREATE OR REPLACE VIEW dre_mensal AS
SELECT
    ano,
    mes,
    TO_CHAR(TO_DATE(mes::text, 'MM'), 'Month') AS mes_nome,
    receita,
    despesa,
    (receita - despesa) as resultado
FROM (
    SELECT
        EXTRACT(YEAR FROM data) as ano,
        EXTRACT(MONTH FROM data) as mes,
        SUM(CASE WHEN tipo = 'ENTRADA' THEN valor ELSE 0 END) as receita,
        SUM(CASE WHEN tipo = 'SAIDA' THEN valor ELSE 0 END) as despesa
    FROM
        fluxo_caixa
    GROUP BY 1, 2
) as sub;

-- Função e Trigger para criar perfil de vendedor
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.vendedores (user_id, nome, email)
  VALUES (new.id, new.raw_user_meta_data->>'full_name', new.email);
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Drop o trigger existente se ele existir
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

-- Criar o novo trigger
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Habilitar RLS e criar políticas
DO $$
DECLARE
    t_name TEXT;
BEGIN
    FOR t_name IN (SELECT table_name FROM information_schema.tables WHERE table_schema = 'public')
    LOOP
        EXECUTE format('ALTER TABLE public.%I ENABLE ROW LEVEL SECURITY;', t_name);
        -- Política para permitir acesso total a usuários autenticados (simplificado para MVP)
        EXECUTE format('DROP POLICY IF EXISTS "Allow authenticated users" ON public.%I;', t_name);
        EXECUTE format('CREATE POLICY "Allow authenticated users" ON public.%I FOR ALL TO authenticated USING (true) WITH CHECK (true);', t_name);
    END LOOP;
END;
$$;
