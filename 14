import React, { useState, useMemo, useEffect } from 'react';
		import { motion, AnimatePresence } from 'framer-motion';
		import { useForm } from 'react-hook-form';
		import { zodResolver } from '@hookform/resolvers/zod';
		import { Info, FileText, Paperclip, Contact2 } from 'lucide-react';
		import { Cliente, TipoPessoa, ContribuinteICMS } from '../../types';
		import { clienteSchema, ClienteFormData } from '../../schemas/clienteSchema';
		import { GenericForm } from '../ui/GenericForm';
		import { DadosGeraisTab } from './form/DadosGeraisTab';
		import { DadosComplementaresTab } from './form/DadosComplementaresTab';
		import { AnexosTab } from './form/AnexosTab';
		import { ObservacoesTab } from './form/ObservacoesTab';
		import { useProfile } from '../../contexts/ProfileContext'; // Alterado para useProfile

		interface ClienteFormProps {
		  cliente?: Partial<Cliente>;
		  onSave: (cliente: ClienteFormData) => void;
		  onCancel: () => void;
		  loading?: boolean;
		}

		const getInitialData = (c?: Partial<Cliente>): Partial<ClienteFormData> => ({
		  id: c?.id,
		  codigo: c?.codigo || '',
		  nome: c?.nome || '',
		  nomeFantasia: c?.nomeFantasia || '',
		  tipoPessoa: c?.tipoPessoa || TipoPessoa.FISICA,
		  cpfCnpj: c?.cpfCnpj || '',
		  rg: c?.rg || '',
		  inscricaoEstadual: c?.inscricaoEstadual || '',
		  inscricaoMunicipal: c?.inscricaoMunicipal || '',
		  contribuinteIcms: c?.contribuinteIcms || ContribuinteICMS.NAO_CONTRIBUINTE,
		  isCliente: c?.isCliente ?? true,
		  isFornecedor: c?.isFornecedor ?? false,
		  isTransportadora: c?.isTransportadora ?? false,
		  logradouro: c?.logradouro || '',
		  numero: c?.numero || '',
		  complemento: c?.complemento || '',
		  bairro: c?.bairro || '',
		  cep: c?.cep || '',
		  cidade: c?.cidade || '',
		  estado: c?.estado || '',
		  pais: c?.pais || 'Brasil',
		  cobrancaLogradouro: c?.cobrancaLogradouro || '',
		  cobrancaNumero: c?.cobrancaNumero || '',
		  cobrancaComplemento: c?.cobrancaComplemento || '',
		  cobrancaBairro: c?.cobrancaBairro || '',
		  cobrancaCep: c?.cobrancaCep || '',
		  cobrancaCidade: c?.cobrancaCidade || '',
		  cobrancaEstado: c?.cobrancaEstado || '',
		  telefoneAdicional: c?.telefoneAdicional || '',
		  celular: c?.celular || '',
		  email: c?.email || '',
		  emailNfe: c?.emailNfe || '',
		  site: c?.site || '',
		  estadoCivil: c?.estadoCivil || '',
		  profissao: c?.profissao || '',
		  sexo: c?.sexo || '',
		  dataNascimento: c?.dataNascimento,
		  naturalidade: c?.naturalidade || '',
		  statusCrm: c?.statusCrm || '',
		  condicaoPagamentoPadraoId: c?.condicaoPagamentoPadraoId || '',
		  limiteCredito: c?.limiteCredito ?? 0,
		  observacoes: c?.observacoes || '',
		  pessoasContato: c?.pessoasContato || [],
		  anexos: c?.anexos || [],
		  createdAt: c?.createdAt,
		});

		export const ClienteForm: React.FC<ClienteFormProps> = ({ cliente, onSave, onCancel, loading }) => {
		  const [activeTab, setActiveTab] = useState('dadosGerais');
		  const { hasPermission } = useProfile(); // Alterado para useProfile

		  const form = useForm<ClienteFormData>({
		    resolver: zodResolver(clienteSchema),
		    defaultValues: getInitialData(cliente),
		  });

		  const { control, handleSubmit, register, watch, setValue, formState: { errors } } = form;

		  useEffect(() => {
		    form.reset(getInitialData(cliente));
		  }, [cliente, form]);

		  const tabs = useMemo(() => [
		    { id: 'dadosGerais', label: 'Dados Gerais', icon: Info },
		    { id: 'dadosComplementares', label: 'Dados Complementares', icon: FileText },
		    { id: 'anexos', label: 'Anexos', icon: Paperclip },
		    { id: 'observacoes', label: 'Observações', icon: Contact2 },
		  ], []);

		  const renderTabContent = () => {
		    switch (activeTab) {
		      case 'dadosGerais':
		        return <DadosGeraisTab control={control} watch={watch} setValue={setValue} />;
		      case 'dadosComplementares':
		        return <DadosComplementaresTab control={control} createdAt={watch('createdAt')} />;
		      case 'anexos':
		        return <AnexosTab entityId={watch('id') || undefined} attachments={watch('anexos') || []} setValue={setValue} />;
		      case 'observacoes':
		        return <ObservacoesTab register={register} />;
		      default:
		        return null;
		    }
		  };

		  return (
		    <GenericForm
		      title={cliente?.id ? 'Editar Cadastro' : 'Novo Cadastro'}
		      onSave={handleSubmit(onSave)}
		      onCancel={onCancel}
		      loading={loading}
		      canSave={hasPermission('clientes.escrever')}
		      size="max-w-6xl"
		    >
		      <div className="px-8 pt-4 border-b border-white/30 -mt-8 -mx-8 mb-8">
		        <div className="flex items-end -mb-px">
		          {tabs.map(tab => (
		            <button
		              key={tab.id}
		              type="button"
		              onClick={() => setActiveTab(tab.id)}
		              className={`flex items-center gap-2 px-4 pt-3 pb-2 transition-colors duration-300 text-sm font-medium border-b-2
		                ${activeTab === tab.id
		                  ? 'bg-glass-100 border-blue-600 text-blue-700 rounded-t-lg border-x border-t border-x-white/30 border-t-white/30'
		                  : 'border-transparent text-gray-600 hover:text-blue-600'
		                }`}
		            >
		              <tab.icon size={16} />
		              {tab.label}
		            </button>
		          ))}
		        </div>
		      </div>
		      <AnimatePresence mode="wait">
		        <motion.div
		          key={activeTab}
		          initial={{ opacity: 0, y: 10 }}
		          animate={{ opacity: 1, y: 0 }}
		          exit={{ opacity: 0, y: -10 }}
		          transition={{ duration: 0.2 }}
		        >
		          {renderTabContent()}
		        </motion.div>
		      </AnimatePresence>
		    </GenericForm>
		  );
		};
